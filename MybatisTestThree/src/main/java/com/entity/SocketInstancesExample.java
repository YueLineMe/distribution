package com.entity;

import java.util.ArrayList;
import java.util.List;

public class SocketInstancesExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public SocketInstancesExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andOBJECT_INSTANCE_BEGINIsNull() {
            addCriterion("OBJECT_INSTANCE_BEGIN is null");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINIsNotNull() {
            addCriterion("OBJECT_INSTANCE_BEGIN is not null");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINEqualTo(Long value) {
            addCriterion("OBJECT_INSTANCE_BEGIN =", value, "OBJECT_INSTANCE_BEGIN");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINNotEqualTo(Long value) {
            addCriterion("OBJECT_INSTANCE_BEGIN <>", value, "OBJECT_INSTANCE_BEGIN");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINGreaterThan(Long value) {
            addCriterion("OBJECT_INSTANCE_BEGIN >", value, "OBJECT_INSTANCE_BEGIN");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINGreaterThanOrEqualTo(Long value) {
            addCriterion("OBJECT_INSTANCE_BEGIN >=", value, "OBJECT_INSTANCE_BEGIN");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINLessThan(Long value) {
            addCriterion("OBJECT_INSTANCE_BEGIN <", value, "OBJECT_INSTANCE_BEGIN");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINLessThanOrEqualTo(Long value) {
            addCriterion("OBJECT_INSTANCE_BEGIN <=", value, "OBJECT_INSTANCE_BEGIN");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINIn(List<Long> values) {
            addCriterion("OBJECT_INSTANCE_BEGIN in", values, "OBJECT_INSTANCE_BEGIN");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINNotIn(List<Long> values) {
            addCriterion("OBJECT_INSTANCE_BEGIN not in", values, "OBJECT_INSTANCE_BEGIN");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINBetween(Long value1, Long value2) {
            addCriterion("OBJECT_INSTANCE_BEGIN between", value1, value2, "OBJECT_INSTANCE_BEGIN");
            return (Criteria) this;
        }

        public Criteria andOBJECT_INSTANCE_BEGINNotBetween(Long value1, Long value2) {
            addCriterion("OBJECT_INSTANCE_BEGIN not between", value1, value2, "OBJECT_INSTANCE_BEGIN");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMEIsNull() {
            addCriterion("EVENT_NAME is null");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMEIsNotNull() {
            addCriterion("EVENT_NAME is not null");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMEEqualTo(String value) {
            addCriterion("EVENT_NAME =", value, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMENotEqualTo(String value) {
            addCriterion("EVENT_NAME <>", value, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMEGreaterThan(String value) {
            addCriterion("EVENT_NAME >", value, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMEGreaterThanOrEqualTo(String value) {
            addCriterion("EVENT_NAME >=", value, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMELessThan(String value) {
            addCriterion("EVENT_NAME <", value, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMELessThanOrEqualTo(String value) {
            addCriterion("EVENT_NAME <=", value, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMELike(String value) {
            addCriterion("EVENT_NAME like", value, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMENotLike(String value) {
            addCriterion("EVENT_NAME not like", value, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMEIn(List<String> values) {
            addCriterion("EVENT_NAME in", values, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMENotIn(List<String> values) {
            addCriterion("EVENT_NAME not in", values, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMEBetween(String value1, String value2) {
            addCriterion("EVENT_NAME between", value1, value2, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andEVENT_NAMENotBetween(String value1, String value2) {
            addCriterion("EVENT_NAME not between", value1, value2, "EVENT_NAME");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDIsNull() {
            addCriterion("THREAD_ID is null");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDIsNotNull() {
            addCriterion("THREAD_ID is not null");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDEqualTo(Long value) {
            addCriterion("THREAD_ID =", value, "THREAD_ID");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDNotEqualTo(Long value) {
            addCriterion("THREAD_ID <>", value, "THREAD_ID");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDGreaterThan(Long value) {
            addCriterion("THREAD_ID >", value, "THREAD_ID");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDGreaterThanOrEqualTo(Long value) {
            addCriterion("THREAD_ID >=", value, "THREAD_ID");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDLessThan(Long value) {
            addCriterion("THREAD_ID <", value, "THREAD_ID");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDLessThanOrEqualTo(Long value) {
            addCriterion("THREAD_ID <=", value, "THREAD_ID");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDIn(List<Long> values) {
            addCriterion("THREAD_ID in", values, "THREAD_ID");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDNotIn(List<Long> values) {
            addCriterion("THREAD_ID not in", values, "THREAD_ID");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDBetween(Long value1, Long value2) {
            addCriterion("THREAD_ID between", value1, value2, "THREAD_ID");
            return (Criteria) this;
        }

        public Criteria andTHREAD_IDNotBetween(Long value1, Long value2) {
            addCriterion("THREAD_ID not between", value1, value2, "THREAD_ID");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDIsNull() {
            addCriterion("SOCKET_ID is null");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDIsNotNull() {
            addCriterion("SOCKET_ID is not null");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDEqualTo(Integer value) {
            addCriterion("SOCKET_ID =", value, "SOCKET_ID");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDNotEqualTo(Integer value) {
            addCriterion("SOCKET_ID <>", value, "SOCKET_ID");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDGreaterThan(Integer value) {
            addCriterion("SOCKET_ID >", value, "SOCKET_ID");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDGreaterThanOrEqualTo(Integer value) {
            addCriterion("SOCKET_ID >=", value, "SOCKET_ID");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDLessThan(Integer value) {
            addCriterion("SOCKET_ID <", value, "SOCKET_ID");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDLessThanOrEqualTo(Integer value) {
            addCriterion("SOCKET_ID <=", value, "SOCKET_ID");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDIn(List<Integer> values) {
            addCriterion("SOCKET_ID in", values, "SOCKET_ID");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDNotIn(List<Integer> values) {
            addCriterion("SOCKET_ID not in", values, "SOCKET_ID");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDBetween(Integer value1, Integer value2) {
            addCriterion("SOCKET_ID between", value1, value2, "SOCKET_ID");
            return (Criteria) this;
        }

        public Criteria andSOCKET_IDNotBetween(Integer value1, Integer value2) {
            addCriterion("SOCKET_ID not between", value1, value2, "SOCKET_ID");
            return (Criteria) this;
        }

        public Criteria andIPIsNull() {
            addCriterion("IP is null");
            return (Criteria) this;
        }

        public Criteria andIPIsNotNull() {
            addCriterion("IP is not null");
            return (Criteria) this;
        }

        public Criteria andIPEqualTo(String value) {
            addCriterion("IP =", value, "IP");
            return (Criteria) this;
        }

        public Criteria andIPNotEqualTo(String value) {
            addCriterion("IP <>", value, "IP");
            return (Criteria) this;
        }

        public Criteria andIPGreaterThan(String value) {
            addCriterion("IP >", value, "IP");
            return (Criteria) this;
        }

        public Criteria andIPGreaterThanOrEqualTo(String value) {
            addCriterion("IP >=", value, "IP");
            return (Criteria) this;
        }

        public Criteria andIPLessThan(String value) {
            addCriterion("IP <", value, "IP");
            return (Criteria) this;
        }

        public Criteria andIPLessThanOrEqualTo(String value) {
            addCriterion("IP <=", value, "IP");
            return (Criteria) this;
        }

        public Criteria andIPLike(String value) {
            addCriterion("IP like", value, "IP");
            return (Criteria) this;
        }

        public Criteria andIPNotLike(String value) {
            addCriterion("IP not like", value, "IP");
            return (Criteria) this;
        }

        public Criteria andIPIn(List<String> values) {
            addCriterion("IP in", values, "IP");
            return (Criteria) this;
        }

        public Criteria andIPNotIn(List<String> values) {
            addCriterion("IP not in", values, "IP");
            return (Criteria) this;
        }

        public Criteria andIPBetween(String value1, String value2) {
            addCriterion("IP between", value1, value2, "IP");
            return (Criteria) this;
        }

        public Criteria andIPNotBetween(String value1, String value2) {
            addCriterion("IP not between", value1, value2, "IP");
            return (Criteria) this;
        }

        public Criteria andPORTIsNull() {
            addCriterion("PORT is null");
            return (Criteria) this;
        }

        public Criteria andPORTIsNotNull() {
            addCriterion("PORT is not null");
            return (Criteria) this;
        }

        public Criteria andPORTEqualTo(Integer value) {
            addCriterion("PORT =", value, "PORT");
            return (Criteria) this;
        }

        public Criteria andPORTNotEqualTo(Integer value) {
            addCriterion("PORT <>", value, "PORT");
            return (Criteria) this;
        }

        public Criteria andPORTGreaterThan(Integer value) {
            addCriterion("PORT >", value, "PORT");
            return (Criteria) this;
        }

        public Criteria andPORTGreaterThanOrEqualTo(Integer value) {
            addCriterion("PORT >=", value, "PORT");
            return (Criteria) this;
        }

        public Criteria andPORTLessThan(Integer value) {
            addCriterion("PORT <", value, "PORT");
            return (Criteria) this;
        }

        public Criteria andPORTLessThanOrEqualTo(Integer value) {
            addCriterion("PORT <=", value, "PORT");
            return (Criteria) this;
        }

        public Criteria andPORTIn(List<Integer> values) {
            addCriterion("PORT in", values, "PORT");
            return (Criteria) this;
        }

        public Criteria andPORTNotIn(List<Integer> values) {
            addCriterion("PORT not in", values, "PORT");
            return (Criteria) this;
        }

        public Criteria andPORTBetween(Integer value1, Integer value2) {
            addCriterion("PORT between", value1, value2, "PORT");
            return (Criteria) this;
        }

        public Criteria andPORTNotBetween(Integer value1, Integer value2) {
            addCriterion("PORT not between", value1, value2, "PORT");
            return (Criteria) this;
        }

        public Criteria andSTATEIsNull() {
            addCriterion("STATE is null");
            return (Criteria) this;
        }

        public Criteria andSTATEIsNotNull() {
            addCriterion("STATE is not null");
            return (Criteria) this;
        }

        public Criteria andSTATEEqualTo(String value) {
            addCriterion("STATE =", value, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATENotEqualTo(String value) {
            addCriterion("STATE <>", value, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATEGreaterThan(String value) {
            addCriterion("STATE >", value, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATEGreaterThanOrEqualTo(String value) {
            addCriterion("STATE >=", value, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATELessThan(String value) {
            addCriterion("STATE <", value, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATELessThanOrEqualTo(String value) {
            addCriterion("STATE <=", value, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATELike(String value) {
            addCriterion("STATE like", value, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATENotLike(String value) {
            addCriterion("STATE not like", value, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATEIn(List<String> values) {
            addCriterion("STATE in", values, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATENotIn(List<String> values) {
            addCriterion("STATE not in", values, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATEBetween(String value1, String value2) {
            addCriterion("STATE between", value1, value2, "STATE");
            return (Criteria) this;
        }

        public Criteria andSTATENotBetween(String value1, String value2) {
            addCriterion("STATE not between", value1, value2, "STATE");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table socket_instances
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table socket_instances
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}